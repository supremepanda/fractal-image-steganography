{"version":3,"sources":["containers/Welcome/style.js","containers/Welcome/index.js","helper/noop.js","helper/getBase64.js","helper/checkFileType.js","components/Upload/index.js","containers/Form/constants.js","containers/Form/index.js","containers/App/index.js","index.js"],"names":["Title","Typography","MainTitle","styled","Paragraph","Link","Index","style","marginBottom","span","level","href","target","message","description","type","showIcon","noop","getBase64","img","callback","reader","FileReader","addEventListener","result","readAsDataURL","checkFileType","file","validTypes","errorMessage","isValid","some","validType","error","onUpload","useState","imageUrl","setImageUrl","listType","showUploadList","customRequest","beforeUpload","Upload","LIST_IGNORE","onChange","info","originFileObj","className","src","alt","width","InboxOutlined","color","fontSize","marginTop","Text","Type","title","Form","useForm","form","setFile","isLoading","setLoading","encodedImage","setEncodedImage","decodedMessage","setDecodedMessage","useEffect","resetFields","resetForm","onSubmit","a","secretKey","secretMessage","endpoint","body","FormData","append","fetch","process","method","response","json","status","data","success","name","onFinish","size","gutter","Item","rules","required","pattern","placeholder","prefix","htmlType","block","loading","justify","download","wordBreak","copyable","mark","Footer","Layout","Content","tabListNoTitle","key","tab","contentListNoTitle","0","1","App","activePaneKey","setActivePaneKey","minHeight","paddingTop","xxl","xl","lg","sm","xs","Welcome","headStyle","tabProps","animated","moreIcon","onTabChange","tabList","activeTabKey","display","alignItems","GithubOutlined","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6e9c952e.chunk.js","sourcesContent":["import styled from \"styled-components\";\nimport { Typography } from \"antd\";\n\nconst { Title } = Typography;\n\nconst MainTitle = styled(Title)`\n  &&& {\n    font-weight: 800;\n    font-size: 48px;\n  }\n`;\n\nexport { MainTitle };\n","import { Row, Col, Typography, Alert } from \"antd\";\n\nimport * as S from \"./style\";\n\nconst { Title, Paragraph, Link } = Typography;\n\nfunction Index() {\n  return (\n    <Row style={{ marginBottom: 24 }}>\n      <Col span={24}>\n        <S.MainTitle>Fractal Image Steganography</S.MainTitle>\n        <Title level={3}>Behind the Scene</Title>\n        <Paragraph>\n          App embeds message and key to the image. To encode, it changing the\n          some pixels of image with the message and key pixels. To encode, it\n          looking the key pixels and when it is find it decodes the message from\n          it. To do that it converts all message, key and image information to\n          binary format. For furthermore information please visit:&nbsp;\n          <Link\n            href=\"https://github.com/supremepanda/fractal-image-steganography#understanding-the-theory\"\n            target=\"_blank\"\n          >\n            here\n          </Link>\n        </Paragraph>\n        <Alert\n          message=\"How it works?\"\n          description=\"Select/Drag & Drop your image to decode or encode. Enter your secret message\n          and secret key for encoding. And keep the secret key for decoding the message for later.\"\n          type=\"info\"\n          showIcon\n        />\n      </Col>\n    </Row>\n  );\n}\n\nexport default Index;\n","const noop = () => {};\n\nexport default noop;\n","const getBase64 = (img, callback) => {\n  const reader = new FileReader();\n\n  reader.addEventListener(\"load\", () => callback(reader.result));\n  reader.readAsDataURL(img);\n};\n\nexport default getBase64;\n","import { message } from \"antd\";\n\nconst checkFileType = (file, validTypes, errorMessage) => {\n  const isValid = validTypes.some((validType) => file.type === validType);\n\n  if (!isValid) {\n    message.error(errorMessage);\n  }\n\n  return isValid;\n};\n\nexport default checkFileType;\n","import { useState } from \"react\";\nimport { Upload, Typography } from \"antd\";\nimport { InboxOutlined } from \"@ant-design/icons\";\n\nimport { checkFileType, getBase64, noop } from \"../../helper\";\nimport \"./style.css\";\n\nfunction Index({ onUpload }) {\n  const [imageUrl, setImageUrl] = useState(\"\");\n\n  const handleChange = (info) => {\n    getBase64(info.file.originFileObj, setImageUrl);\n    onUpload(info.file);\n  };\n\n  const handleBeforeUpload = (file) => {\n    const isValid = checkFileType(\n      file,\n      [\"image/jpg\", \"image/png\", \"image/jpeg\"],\n      \"You can only upload JPG/PNG file!\"\n    );\n\n    return isValid ? isValid : Upload.LIST_IGNORE;\n  };\n\n  return (\n    <Upload\n      listType=\"picture-card\"\n      showUploadList={false}\n      customRequest={noop}\n      beforeUpload={handleBeforeUpload}\n      onChange={handleChange}\n      className=\"upload-area\"\n    >\n      {imageUrl ? (\n        <img src={imageUrl} alt=\"Uploaded image\" className=\"uploaded-image\" />\n      ) : (\n        <div style={{ width: \"100%\" }}>\n          <InboxOutlined\n            className=\"upload-icon\"\n            style={{ color: \"#1890ff\", fontSize: 36 }}\n          />\n          <div style={{ marginTop: 16 }}>\n            <Typography.Title level={4}>\n              Click or drag file to this area to upload\n            </Typography.Title>\n            <Typography.Text type=\"secondary\">\n              You can only upload JPG/JPEG/PNG file\n            </Typography.Text>\n          </div>\n        </div>\n      )}\n    </Upload>\n  );\n}\n\nexport default Index;\n","const Type = {\n  ENCODE: \"encode\",\n  DECODE: \"decode\",\n};\n\nexport { Type };\n","import { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Form, Input, Button, Row, Col, message, Typography } from \"antd\";\nimport { InboxOutlined } from \"@ant-design/icons\";\n\nimport Upload from \"../../components/Upload\";\nimport { Type } from \"./constants\";\n\nfunction Index({ type, title }) {\n  const [form] = Form.useForm();\n\n  const [file, setFile] = useState(\"\");\n  const [isLoading, setLoading] = useState(false);\n  const [encodedImage, setEncodedImage] = useState(\"\");\n  const [decodedMessage, setDecodedMessage] = useState(\"\");\n\n  useEffect(() => {\n    form.resetFields();\n    resetForm();\n  }, [title]);\n\n  const resetForm = () => {\n    setLoading(false);\n    setFile(\"\");\n    setDecodedMessage(\"\");\n    setEncodedImage(\"\");\n  };\n\n  const onSubmit = async ({ secretKey, secretMessage }) => {\n    setLoading(true);\n\n    let endpoint = \"/decode\";\n\n    const body = new FormData();\n\n    body.append(\"file\", file.originFileObj);\n    body.append(\"secretKey\", secretKey);\n\n    if (type === Type.ENCODE) {\n      body.append(\"secretMessage\", secretMessage);\n      endpoint = \"/encode\";\n    }\n\n    let response = await fetch(`${process.env.REACT_APP_BASE_URL}${endpoint}`, {\n      method: \"POST\",\n      body,\n    });\n\n    response = await response.json();\n\n    if (type === Type.ENCODE) {\n      if (response.status) {\n        const imageUrl = `data:image/png;base64,${response.data}`;\n        setEncodedImage(imageUrl);\n        message.success(`${file.name} file encoded successfully`, 3);\n      } else {\n        message.error(response.data, 3);\n      }\n    } else if (type === Type.DECODE) {\n      if (response.status) {\n        setDecodedMessage(response.data);\n        message.success(`${file.name} file decoded successfully`, 3);\n      } else {\n        message.error(response.data, 3);\n      }\n    }\n\n    setLoading(false);\n  };\n\n  return (\n    <Form name={`form-${title}`} onFinish={onSubmit} size=\"large\" form={form}>\n      <Row gutter={12}>\n        {type === \"encode\" && (\n          <Col span={12}>\n            <Form.Item\n              name=\"secretMessage\"\n              rules={[\n                {\n                  required: true,\n                  message: \"Please enter the secret message\",\n                },\n                {\n                  required: true,\n                  message: \"Please enter only ASCII characters\",\n                  pattern: /^[\\x00-\\x7F]*$/,\n                },\n              ]}\n            >\n              <Input\n                placeholder=\"Secret message\"\n                prefix={<InboxOutlined />}\n                type=\"text\"\n              />\n            </Form.Item>\n          </Col>\n        )}\n        <Col span={type === \"decode\" ? 24 : 12}>\n          <Form.Item\n            name=\"secretKey\"\n            rules={[\n              {\n                required: true,\n                message: \"Please enter the secret key\",\n              },\n              {\n                required: true,\n                message: \"Please enter only ASCII characters\",\n                pattern: /^[\\x00-\\x7F]*$/,\n              },\n            ]}\n          >\n            <Input\n              placeholder=\"Secret key\"\n              prefix={<InboxOutlined />}\n              type=\"text\"\n            />\n          </Form.Item>\n        </Col>\n      </Row>\n      <Form.Item name=\"upload\">\n        <Upload onUpload={setFile} />\n      </Form.Item>\n      <Form.Item>\n        <Button type=\"primary\" htmlType=\"submit\" block loading={isLoading}>\n          {title}\n        </Button>\n      </Form.Item>\n      {type === Type.ENCODE && encodedImage && (\n        <Row justify=\"center\">\n          <Typography.Text>Image {type}d successfully.&nbsp;</Typography.Text>\n          <Typography.Link\n            href={encodedImage}\n            download={`encoded_${file?.name}`}\n          >\n            Click to Download\n          </Typography.Link>\n        </Row>\n      )}\n      {type === Type.DECODE && decodedMessage && (\n        <Row justify=\"center\">\n          <Typography.Text>Your secret message is:&nbsp;</Typography.Text>\n          <Typography.Text style={{ wordBreak: \"break-word\" }} copyable mark>\n            &nbsp;{decodedMessage}&nbsp;\n          </Typography.Text>\n        </Row>\n      )}\n    </Form>\n  );\n}\n\nIndex.propTypes = {\n  type: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n};\n\nexport default Index;\n","import { useState, useEffect } from \"react\";\nimport { Layout, Col, Row, Card, Button } from \"antd\";\nimport { GithubOutlined } from \"@ant-design/icons\";\n\nimport Welcome from \"../Welcome\";\nimport Form from \"../Form\";\nimport \"./style.css\";\n\nconst { Footer, Content } = Layout;\n\nconst tabListNoTitle = [\n  {\n    key: \"0\",\n    tab: \"Encode\",\n  },\n  {\n    key: \"1\",\n    tab: \"Decode\",\n  },\n];\n\nconst contentListNoTitle = {\n  0: <Form type=\"encode\" title=\"Encode\" />,\n  1: <Form type=\"decode\" title=\"Decode\" />,\n};\n\nfunction App() {\n  const [activePaneKey, setActivePaneKey] = useState(tabListNoTitle[0].key);\n\n  useEffect(() => {\n    // To start up Heroku server\n    fetch(`${process.env.REACT_APP_BASE_URL}/are-you-alive`);\n  }, []);\n\n  return (\n    <Layout style={{ minHeight: \"100vh\", paddingTop: 24 }}>\n      <Content>\n        <Row justify=\"center\">\n          <Col xxl={10} xl={14} lg={22} sm={22} xs={22}>\n            <Welcome />\n          </Col>\n        </Row>\n        <Row justify=\"center\">\n          <Col xxl={10} xl={14} lg={22} sm={22} xs={22}>\n            <Card\n              headStyle={{ paddingTop: 24, minHeight: 40 }}\n              tabProps={{\n                type: \"card\",\n                animated: true,\n                moreIcon: true,\n              }}\n              onTabChange={(key) => setActivePaneKey(key)}\n              style={{ width: \"100%\" }}\n              tabList={tabListNoTitle}\n              activeTabKey={activePaneKey}\n            >\n              {contentListNoTitle[activePaneKey]}\n            </Card>\n          </Col>\n        </Row>\n      </Content>\n      <Footer>\n        <Row justify=\"center\">\n          <Col>\n            <Button\n              type=\"link\"\n              href=\"https://github.com/supremepanda/fractal-image-steganography\"\n              target=\"_blank\"\n              style={{\n                color: \"initial\",\n                display: \"flex\",\n                alignItems: \"center\",\n              }}\n            >\n              <GithubOutlined style={{ fontSize: 18 }} />\n              See on Github\n            </Button>\n          </Col>\n        </Row>\n      </Footer>\n    </Layout>\n  );\n}\n\nexport default App;\n","import ReactDOM from \"react-dom\";\nimport App from \"./containers/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}